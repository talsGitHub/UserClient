"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var better_sqlite3_1 = __importDefault(require("better-sqlite3"));
var types_1 = require("./types");
// Storage interface implementation
// Based on the HTML Living Standard specification
// https://html.spec.whatwg.org/multipage/webstorage.html
var StorageBackend = /** @class */ (function () {
    function StorageBackend(type) {
        var _this = this;
        this.type = type;
        this.database = better_sqlite3_1.default("webstorage.db", {
            memory: type === types_1.StorageType.SessionStorage,
        });
        this.database.exec("\n      CREATE TABLE IF NOT EXISTS webstorage(\n        key TEXT PRIMARY KEY,\n        value TEXT,\n        added INTEGER DEFAULT (strftime('%s', 'now'))\n      );\n    ");
        // Database#close()
        // Ref: https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md
        process.on("exit", function () { return _this.database.close(); });
        process.on("SIGHUP", function () { return process.exit(128 + 1); });
        process.on("SIGINT", function () { return process.exit(128 + 2); });
        process.on("SIGTERM", function () { return process.exit(128 + 15); });
    }
    Object.defineProperty(StorageBackend.prototype, "length", {
        get: function () {
            var statement = "SELECT count(key) AS count FROM webstorage;";
            var result = this.database.prepare(statement).get();
            return result ? result["count"] : 0;
        },
        enumerable: true,
        configurable: true
    });
    StorageBackend.prototype.key = function (index) {
        var statement = "SELECT key FROM webstorage ORDER BY added ASC;";
        var results = this.database.prepare(statement).all();
        return results && results.length >= index + 1
            ? results[index]["key"]
            : null; // null if index > length, as per spec
    };
    StorageBackend.prototype.getItem = function (key) {
        var statement = "SELECT value FROM webstorage\n      WHERE key=?";
        var result = this.database.prepare(statement).get(key);
        return result ? result["value"] : undefined;
    };
    StorageBackend.prototype.setItem = function (key, value) {
        var statement = "INSERT OR REPLACE INTO webstorage \n      VALUES (@key, @value, \n        COALESCE(\n          (SELECT added FROM webstorage WHERE key=@key), \n          (strftime('%s', 'now'))\n        )\n      );";
        this.database.prepare(statement).run({ key: key, value: value });
    };
    StorageBackend.prototype.removeItem = function (key) {
        var statement = "DELETE FROM webstorage WHERE key=?";
        this.database.prepare(statement).run(key);
    };
    StorageBackend.prototype.clear = function () {
        var statement = "DELETE FROM webstorage";
        this.database.prepare(statement).run();
    };
    return StorageBackend;
}());
exports.StorageBackend = StorageBackend;
