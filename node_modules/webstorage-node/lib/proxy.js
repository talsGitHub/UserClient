"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Use ES6 proxies to allow properties to be get, set and deleted using
// JS operators (i.e. storage["x"] = y, y = storage["x"], delete storage["x"])
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
var WebStorageAPIError = /** @class */ (function (_super) {
    __extends(WebStorageAPIError, _super);
    function WebStorageAPIError() {
        var _this = _super.call(this, "Overriding methods/properties of the Web Storage API is forbidden") || this;
        _this.name = "WebStorageAPIError";
        return _this;
    }
    return WebStorageAPIError;
}(Error));
exports.WebStorageAPIError = WebStorageAPIError;
exports.StorageProxy = {
    get: function (backend, prop) {
        var property = String(prop);
        var methodsAndProps = Object.keys(Object.getPrototypeOf(backend));
        return methodsAndProps.includes(property)
            ? backend[property].bind(backend)
            : backend.getItem(property);
    },
    set: function (backend, prop, value) {
        var property = String(prop);
        var methodsAndProps = Object.keys(Object.getPrototypeOf(backend));
        if (methodsAndProps.includes(property)) {
            throw new WebStorageAPIError();
        }
        var stringifiedVal = typeof value === "string"
            ? value // string
            : typeof value === "object"
                ? JSON.stringify(value) // objects and arrays
                : String(value); // numbers and booleans
        backend.setItem(property, stringifiedVal);
        return true;
    },
    deleteProperty: function (backend, prop) {
        var property = String(prop);
        var methodsAndProps = Object.keys(Object.getPrototypeOf(backend));
        if (methodsAndProps.includes(property)) {
            throw new WebStorageAPIError();
        }
        backend.removeItem(property);
        return true;
    },
};
